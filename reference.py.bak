	
	
	
	
# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# ##### END GPL LICENSE BLOCK #####
	
	
"""

Old 2.79 modified for 2.8  - 19 May 2020

https://blenderartists.org/t/dimensions-of-all-selected-objects/614704/28

by  Rickiblender 



"""
	
	
	
	
import bpy
from bpy.props import *
from mathutils import *
from math import *
	
from bpy.types import Operator
	
from bpy.types import PropertyGroup
	
	
	
from bpy.props import *

from bpy.props import (
			StringProperty,
			BoolProperty,
			EnumProperty,
			IntProperty,
			FloatProperty,
			CollectionProperty,
			BoolVectorProperty,
			IntVectorProperty,
			PointerProperty
			)
	
from bpy.types import (
					   Panel,
					   Operator,
					   PropertyGroup,
					  )
	
	
	
###
	
	
	
class My_settings(bpy.types.PropertyGroup):
	
	my_float: bpy.props.FloatProperty(
		name ='Float',
		default = 0.0 
	)
	
	my_bool: bpy.props.BoolProperty(
		name ='MyCkeckbox1',
		default = False
	)
	
	
	
###
	
	
	
bl_info = {
	"name": "Scene selected ob Dim",
	"author": "Rickyblender",
	"version": (0, 1, 0),
	"blender": (2, 80, 2),
	"location": "View3D > Add > Mesh > scenedim",
	"description": "Scene selected ob Dim  ",
	"warning": "Modif Date  19 MAy 2020",
	"category": "Add Mesh"
	}
	
	
	
	
	
	
	
###

	
scd1 = [0,0,0,0]
	
	
###
	
def scenedim1():
	
	
	global scd1
	
	minx = 0
	miny = 0
	minz = 0
	
	maxx = 0
	maxy = 0
	maxz = 0
	
	
	c1=0
	
	for o1 in bpy.context.selected_objects:
	
		if o1.name=="Camera" or o1.name=="Empty":
			pass
	
		else:
	
#   		print ('ob=',o1.name)
#   		print ()
	
			bounds = functions.getobjectBounds(o1)		
			oxmin = bounds[0][0]
			oxmax = bounds[1][0]
	
			oymin = bounds[0][1]
			oymax = bounds[1][1]
		
			ozmin = bounds[0][2]
			ozmax = bounds[1][2]
	
			if  c1 == 0 :
				minx = oxmin
				miny = oymin
				minz = ozmin
	
				maxx = oxmax
				maxy = oymax
				maxz = ozmax
	
		 # min 	
			if oxmin <= minx:
				minx = oxmin	
			if oymin <= miny:
				miny = oymin	
			if ozmin <= minz:
				minz = ozmin	
		# max 	
			if oxmax >= maxx:
				maxx = oxmax	
			if oymax >= maxy:
				maxy = oymax	
			if ozmax >= maxz:
				maxz = ozmax	
		c1+=1	
	
	widhtx=(maxx-minx)	
	widhty=maxy-miny	
	widhtz=maxz-minz		
	scd = [widhtx ,widhty ,widhtz ,len(bpy.context.selected_objects) ]	
	scd1 = scd
	
	return 
	
###
	
	
class ScenedimdPanel(bpy.types.Panel):	
	"""Creates a Panel in the Object properties window"""
	
	bl_idname = "OBJECT_PT_hello"
	bl_label = "Scene-dim-panel"
	bl_space_type = 'PROPERTIES'
	bl_region_type = 'WINDOW'
	bl_context = "object"
	
	
	@classmethod
	def poll(cls, context):
		obs = bpy.context.selected_objects
		return obs
	
	def draw(self, context):
	
		global scd1	
		layout = self.layout
		scene = context.scene	
	
		my_prop1 = context.scene.my_prop1	
		col = layout.column()	
		col.prop( my_prop1, "my_bool")	
	
		if my_prop1.my_bool :
			dx1 = scd1[0]
			dy1 = scd1[1]
			dz1 = scd1[2]
			row = layout.row()
			row.label( text = "Scene selected ob DIM", icon='WORLD_DATA')
	
			le1 = scd1[3]
			row = layout.row()
			row.label( text = "selected object is: " + str(le1))
	
            #   	unit = bpy.context.scene.unit_settings
			unit = bpy.context.scene.unit_settings.system
	
	
			if unit == "METRIC":	#   		print ('Metric units system')
				m1  = " mm"
				dx1 = dx1*1000
				dy1 = dy1*1000
				dz1 = dz1*1000
	
			elif unit == "IMPERIAL":	#   		print ('IMPERIA units system')
				m1 = " Feet"
	
			else:	#   		print ('BU units system')
				m1 = " BU"
	
			print ('units =', unit  )
	
			ASTx = str("%.2f"%(dx1))+" X " + m1
			row = layout.row()
			row.label(text="X Dim = " + ASTx)
			ASTy = str("%.2f"%(dy1))+" Y " + m1
			row = layout.row()
			row.label(text="Y Dim = " + ASTy)
			ASTz = str("%.2f"%(dz1))+" Z " + m1
			row = layout.row()
			row.label(text="Z Dim =" + ASTz)	
	
			row = layout.row()
			layout.operator("custom.button1")
	
		else:
			print ('checkbox Fake')
	
	
	
	
###
	
	
class functions():	
	def getobjectBounds(ob):	
		obminx = ob.location.x
		obminy = ob.location.y
		obminz = ob.location.z
	
		obmaxx = ob.location.x
		obmaxy = ob.location.y
		obmaxz = ob.location.z
	
		for vertex in ob.bound_box[:]:
	
			x = ob.location.x + (ob.scale.x * vertex[0])
			y = ob.location.y + (ob.scale.y * vertex[1])
			z = ob.location.z + (ob.scale.z * vertex[2])
	
			if x <= obminx:
				obminx = x
			if y <= obminy:
				obminy = y
			if z <= obminz:
				obminz = z
	
			if x >= obmaxx:
				obmaxx = x
			if y >= obmaxy:
				obmaxy = y
			if z >= obmaxz:
				obmaxz = z
	
		boundsmin = [obminx,obminy,obminz]
		boundsmax = [obmaxx,obmaxy,obmaxz] 
		bounds = [boundsmin,boundsmax]
		return bounds
	
###
	
class Custombutton1(bpy.types.Operator):	
	bl_idname = "custom.button1"
	bl_label = "Do Calculations"
	__doc__ = "Simple Custom Button"
	
	def invoke(self, context, event): # when the button is press it prints this to the log / Console
		scenedim1()
		print("Custom Button1  Calculate scene dim")
		return{'FINISHED'}    
	
	
###
	
	
classes = (
	My_settings,
	ScenedimdPanel,
	Custombutton1
	)


def register():	
	for cls in classes:	
		bpy.utils.register_class(cls)	
	bpy.types.Scene.my_prop1 = bpy.props.PointerProperty( type = My_settings )
	

def unregister():
	del bpy.types.Scene.my_too
	for cls in reversed(classes):
		bpy.utils.unregister_class(cls)
	del bpy.types.Scene.my_prop1
	

if __name__ == "__main__":
	register()
	
	
	
	